/* tslint:disable */
/* eslint-disable */
/**
 * API Document
 * # APIの仕様 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 一斉架電
 * @export
 * @interface Call
 */
export interface Call {
    /**
     * 一斉架電ID
     * @type {string}
     * @memberof Call
     */
    'id': string;
    /**
     * 架電名 
     * @type {string}
     * @memberof Call
     */
    'name': string | null;
    /**
     * 説明
     * @type {string}
     * @memberof Call
     */
    'description'?: string | null;
    /**
     * 作成日時
     * @type {string}
     * @memberof Call
     */
    'createdAt': string;
    /**
     * 更新日時（最初は作成日時）
     * @type {string}
     * @memberof Call
     */
    'updatedAt': string;
}
/**
 * 一斉架電登録リクエスト
 * @export
 * @interface CreateCallRequest
 */
export interface CreateCallRequest {
    /**
     * 架電名 
     * @type {string}
     * @memberof CreateCallRequest
     */
    'name': string | null;
    /**
     * 説明
     * @type {string}
     * @memberof CreateCallRequest
     */
    'description': string | null;
    /**
     * 
     * @type {Array<PhoneNo>}
     * @memberof CreateCallRequest
     */
    'phoneNos': Array<PhoneNo>;
}
/**
 * 施設グループ登録リクエスト
 * @export
 * @interface CreateInstGroupRequest
 */
export interface CreateInstGroupRequest {
    /**
     * 施設グループ名 
     * @type {string}
     * @memberof CreateInstGroupRequest
     */
    'name': string | null;
    /**
     * 説明
     * @type {string}
     * @memberof CreateInstGroupRequest
     */
    'description': string | null;
}
/**
 * 施設登録リクエスト
 * @export
 * @interface CreateInstRequest
 */
export interface CreateInstRequest {
    /**
     * 施設名 
     * @type {string}
     * @memberof CreateInstRequest
     */
    'name': string | null;
    /**
     * 説明
     * @type {string}
     * @memberof CreateInstRequest
     */
    'description': string | null;
}
/**
 * 事案作成リクエスト
 * @export
 * @interface CreateJianRequest
 */
export interface CreateJianRequest {
    /**
     * 事案名 
     * @type {string}
     * @memberof CreateJianRequest
     */
    'name': string | null;
    /**
     * 説明
     * @type {string}
     * @memberof CreateJianRequest
     */
    'description': string | null;
}
/**
 * 施設
 * @export
 * @interface Inst
 */
export interface Inst {
    /**
     * 施設ID
     * @type {string}
     * @memberof Inst
     */
    'id': string;
    /**
     * 施設名 
     * @type {string}
     * @memberof Inst
     */
    'name': string | null;
    /**
     * 説明
     * @type {string}
     * @memberof Inst
     */
    'description'?: string | null;
    /**
     * 電話番号
     * @type {string}
     * @memberof Inst
     */
    'phoneNo'?: string | null;
    /**
     * 作成日時
     * @type {string}
     * @memberof Inst
     */
    'createdAt': string;
    /**
     * 更新日時（最初は作成日時）
     * @type {string}
     * @memberof Inst
     */
    'updatedAt': string;
}
/**
 * 施設グループ
 * @export
 * @interface InstGroup
 */
export interface InstGroup {
    /**
     * 施設グループID
     * @type {string}
     * @memberof InstGroup
     */
    'id': string;
    /**
     * 施設グループ名 
     * @type {string}
     * @memberof InstGroup
     */
    'name': string | null;
    /**
     * 説明
     * @type {string}
     * @memberof InstGroup
     */
    'description'?: string | null;
    /**
     * グループに所属する施設一覧
     * @type {Array<Inst>}
     * @memberof InstGroup
     */
    'instGroupMembers'?: Array<Inst> | null;
    /**
     * 作成日時
     * @type {string}
     * @memberof InstGroup
     */
    'createdAt': string;
    /**
     * 更新日時（最初は作成日時）
     * @type {string}
     * @memberof InstGroup
     */
    'updatedAt': string;
}
/**
 * 施設グループ一覧
 * @export
 * @interface InstGroupsResponse
 */
export interface InstGroupsResponse {
    /**
     * 
     * @type {Pager}
     * @memberof InstGroupsResponse
     */
    'pager': Pager;
    /**
     * 
     * @type {Array<InstGroup>}
     * @memberof InstGroupsResponse
     */
    'data': Array<InstGroup>;
}
/**
 * 施設一覧
 * @export
 * @interface InstsResponse
 */
export interface InstsResponse {
    /**
     * 
     * @type {Pager}
     * @memberof InstsResponse
     */
    'pager': Pager;
    /**
     * 
     * @type {Array<Inst>}
     * @memberof InstsResponse
     */
    'data': Array<Inst>;
}
/**
 * 事案
 * @export
 * @interface Jian
 */
export interface Jian {
    /**
     * 事案ID
     * @type {string}
     * @memberof Jian
     */
    'id': string;
    /**
     * 事案名 
     * @type {string}
     * @memberof Jian
     */
    'name': string | null;
    /**
     * 説明
     * @type {string}
     * @memberof Jian
     */
    'description'?: string | null;
    /**
     * 作成日時
     * @type {string}
     * @memberof Jian
     */
    'createdAt': string;
    /**
     * 更新日時（最初は作成日時）
     * @type {string}
     * @memberof Jian
     */
    'updatedAt': string;
}
/**
 * 事案一覧
 * @export
 * @interface JiansResponse
 */
export interface JiansResponse {
    /**
     * 
     * @type {Pager}
     * @memberof JiansResponse
     */
    'pager': Pager;
    /**
     * 
     * @type {Array<Jian>}
     * @memberof JiansResponse
     */
    'data': Array<Jian>;
}
/**
 * レスポンスのページネーション情報
 * @export
 * @interface Pager
 */
export interface Pager {
    /**
     * ページ番号
     * @type {number}
     * @memberof Pager
     */
    'page': number;
    /**
     * 1ページあたりの取得件数
     * @type {number}
     * @memberof Pager
     */
    'size': number;
    /**
     * 全ページ数
     * @type {number}
     * @memberof Pager
     */
    'totalPage': number;
    /**
     * 全ページでのレコードの件数
     * @type {number}
     * @memberof Pager
     */
    'totalCount': number;
    /**
     * 前のページがあるかどうか
     * @type {boolean}
     * @memberof Pager
     */
    'hasPrevPage': boolean;
    /**
     * 次のページがあるかどうか
     * @type {boolean}
     * @memberof Pager
     */
    'hasNextPage': boolean;
}
/**
 * 一斉架電対象電話番号
 * @export
 * @interface PhoneNo
 */
export interface PhoneNo {
    /**
     * 一斉架電対象電話番号
     * @type {string}
     * @memberof PhoneNo
     */
    'phoneNo'?: string;
}
/**
 * 
 * @export
 * @interface ResponseComponentMessage
 */
export interface ResponseComponentMessage {
    /**
     * メッセージ
     * @type {string}
     * @memberof ResponseComponentMessage
     */
    'message'?: string;
}

/**
 * CallApi - axios parameter creator
 * @export
 */
export const CallApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 一斉架電を登録する
         * @param {string} jianId 対象の事案ID
         * @param {CreateCallRequest} createCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCall: async (jianId: string, createCallRequest: CreateCallRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jianId' is not null or undefined
            assertParamExists('createCall', 'jianId', jianId)
            // verify required parameter 'createCallRequest' is not null or undefined
            assertParamExists('createCall', 'createCallRequest', createCallRequest)
            const localVarPath = `/jians/{jianId}/calls`
                .replace(`{${"jianId"}}`, encodeURIComponent(String(jianId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCallRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallApi - functional programming interface
 * @export
 */
export const CallApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 一斉架電を登録する
         * @param {string} jianId 対象の事案ID
         * @param {CreateCallRequest} createCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCall(jianId: string, createCallRequest: CreateCallRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Call>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCall(jianId, createCallRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CallApi - factory interface
 * @export
 */
export const CallApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallApiFp(configuration)
    return {
        /**
         * 
         * @summary 一斉架電を登録する
         * @param {string} jianId 対象の事案ID
         * @param {CreateCallRequest} createCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCall(jianId: string, createCallRequest: CreateCallRequest, options?: any): AxiosPromise<Call> {
            return localVarFp.createCall(jianId, createCallRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallApi - object-oriented interface
 * @export
 * @class CallApi
 * @extends {BaseAPI}
 */
export class CallApi extends BaseAPI {
    /**
     * 
     * @summary 一斉架電を登録する
     * @param {string} jianId 対象の事案ID
     * @param {CreateCallRequest} createCallRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallApi
     */
    public createCall(jianId: string, createCallRequest: CreateCallRequest, options?: AxiosRequestConfig) {
        return CallApiFp(this.configuration).createCall(jianId, createCallRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InstApi - axios parameter creator
 * @export
 */
export const InstApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 施設を登録する
         * @param {CreateInstRequest} createInstRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInst: async (createInstRequest: CreateInstRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createInstRequest' is not null or undefined
            assertParamExists('createInst', 'createInstRequest', createInstRequest)
            const localVarPath = `/insts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInstRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 施設情報を返す
         * @param {string} instId 対象の施設ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInst: async (instId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'instId' is not null or undefined
            assertParamExists('getInst', 'instId', instId)
            const localVarPath = `/insts/{instId}`
                .replace(`{${"instId"}}`, encodeURIComponent(String(instId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 施設一覧を返す
         * @param {number} [page] ページ番号
         * @param {number} [size] 取得件数
         * @param {string} [sort] ソート順。日時でソートする場合は createdAt や -createdAt を指定する
         * @param {string} [name] 施設名での絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsts: async (page?: number, size?: number, sort?: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/insts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstApi - functional programming interface
 * @export
 */
export const InstApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 施設を登録する
         * @param {CreateInstRequest} createInstRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInst(createInstRequest: CreateInstRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInst(createInstRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 施設情報を返す
         * @param {string} instId 対象の施設ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInst(instId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inst>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInst(instId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 施設一覧を返す
         * @param {number} [page] ページ番号
         * @param {number} [size] 取得件数
         * @param {string} [sort] ソート順。日時でソートする場合は createdAt や -createdAt を指定する
         * @param {string} [name] 施設名での絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInsts(page?: number, size?: number, sort?: string, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInsts(page, size, sort, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstApi - factory interface
 * @export
 */
export const InstApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstApiFp(configuration)
    return {
        /**
         * 
         * @summary 施設を登録する
         * @param {CreateInstRequest} createInstRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInst(createInstRequest: CreateInstRequest, options?: any): AxiosPromise<Inst> {
            return localVarFp.createInst(createInstRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 施設情報を返す
         * @param {string} instId 対象の施設ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInst(instId: string, options?: any): AxiosPromise<Inst> {
            return localVarFp.getInst(instId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 施設一覧を返す
         * @param {number} [page] ページ番号
         * @param {number} [size] 取得件数
         * @param {string} [sort] ソート順。日時でソートする場合は createdAt や -createdAt を指定する
         * @param {string} [name] 施設名での絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsts(page?: number, size?: number, sort?: string, name?: string, options?: any): AxiosPromise<InstsResponse> {
            return localVarFp.getInsts(page, size, sort, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstApi - object-oriented interface
 * @export
 * @class InstApi
 * @extends {BaseAPI}
 */
export class InstApi extends BaseAPI {
    /**
     * 
     * @summary 施設を登録する
     * @param {CreateInstRequest} createInstRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstApi
     */
    public createInst(createInstRequest: CreateInstRequest, options?: AxiosRequestConfig) {
        return InstApiFp(this.configuration).createInst(createInstRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 施設情報を返す
     * @param {string} instId 対象の施設ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstApi
     */
    public getInst(instId: string, options?: AxiosRequestConfig) {
        return InstApiFp(this.configuration).getInst(instId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 施設一覧を返す
     * @param {number} [page] ページ番号
     * @param {number} [size] 取得件数
     * @param {string} [sort] ソート順。日時でソートする場合は createdAt や -createdAt を指定する
     * @param {string} [name] 施設名での絞り込み
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstApi
     */
    public getInsts(page?: number, size?: number, sort?: string, name?: string, options?: AxiosRequestConfig) {
        return InstApiFp(this.configuration).getInsts(page, size, sort, name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InstGroupApi - axios parameter creator
 * @export
 */
export const InstGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 施設グループを作成する
         * @param {CreateInstGroupRequest} createInstGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstGroup: async (createInstGroupRequest: CreateInstGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createInstGroupRequest' is not null or undefined
            assertParamExists('createInstGroup', 'createInstGroupRequest', createInstGroupRequest)
            const localVarPath = `/inst-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInstGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 施設グループ情報を返す
         * @param {string} instGroupId 対象の施設グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstGroup: async (instGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'instGroupId' is not null or undefined
            assertParamExists('getInstGroup', 'instGroupId', instGroupId)
            const localVarPath = `/inst-groups/{instGroupId}`
                .replace(`{${"instGroupId"}}`, encodeURIComponent(String(instGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 施設グループ一覧を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inst-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstGroupApi - functional programming interface
 * @export
 */
export const InstGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 施設グループを作成する
         * @param {CreateInstGroupRequest} createInstGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstGroup(createInstGroupRequest: CreateInstGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstGroup(createInstGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 施設グループ情報を返す
         * @param {string} instGroupId 対象の施設グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstGroup(instGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstGroup(instGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 施設グループ一覧を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstGroupApi - factory interface
 * @export
 */
export const InstGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary 施設グループを作成する
         * @param {CreateInstGroupRequest} createInstGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstGroup(createInstGroupRequest: CreateInstGroupRequest, options?: any): AxiosPromise<InstGroup> {
            return localVarFp.createInstGroup(createInstGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 施設グループ情報を返す
         * @param {string} instGroupId 対象の施設グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstGroup(instGroupId: string, options?: any): AxiosPromise<InstGroup> {
            return localVarFp.getInstGroup(instGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 施設グループ一覧を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstGroups(options?: any): AxiosPromise<InstGroupsResponse> {
            return localVarFp.getInstGroups(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstGroupApi - object-oriented interface
 * @export
 * @class InstGroupApi
 * @extends {BaseAPI}
 */
export class InstGroupApi extends BaseAPI {
    /**
     * 
     * @summary 施設グループを作成する
     * @param {CreateInstGroupRequest} createInstGroupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstGroupApi
     */
    public createInstGroup(createInstGroupRequest: CreateInstGroupRequest, options?: AxiosRequestConfig) {
        return InstGroupApiFp(this.configuration).createInstGroup(createInstGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 施設グループ情報を返す
     * @param {string} instGroupId 対象の施設グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstGroupApi
     */
    public getInstGroup(instGroupId: string, options?: AxiosRequestConfig) {
        return InstGroupApiFp(this.configuration).getInstGroup(instGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 施設グループ一覧を返す
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstGroupApi
     */
    public getInstGroups(options?: AxiosRequestConfig) {
        return InstGroupApiFp(this.configuration).getInstGroups(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JianApi - axios parameter creator
 * @export
 */
export const JianApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 事案を作成する
         * @param {CreateJianRequest} createJianRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJian: async (createJianRequest: CreateJianRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJianRequest' is not null or undefined
            assertParamExists('createJian', 'createJianRequest', createJianRequest)
            const localVarPath = `/jians`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJianRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 事案一覧を返す
         * @param {number} [page] ページ番号
         * @param {number} [size] 取得件数
         * @param {string} [sort] ソート順。日時でソートする場合は createdAt や -createdAt を指定する
         * @param {string} [name] 事案名での絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJians: async (page?: number, size?: number, sort?: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jians`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JianApi - functional programming interface
 * @export
 */
export const JianApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JianApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 事案を作成する
         * @param {CreateJianRequest} createJianRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJian(createJianRequest: CreateJianRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Jian>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJian(createJianRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 事案一覧を返す
         * @param {number} [page] ページ番号
         * @param {number} [size] 取得件数
         * @param {string} [sort] ソート順。日時でソートする場合は createdAt や -createdAt を指定する
         * @param {string} [name] 事案名での絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJians(page?: number, size?: number, sort?: string, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JiansResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJians(page, size, sort, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JianApi - factory interface
 * @export
 */
export const JianApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JianApiFp(configuration)
    return {
        /**
         * 
         * @summary 事案を作成する
         * @param {CreateJianRequest} createJianRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJian(createJianRequest: CreateJianRequest, options?: any): AxiosPromise<Jian> {
            return localVarFp.createJian(createJianRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 事案一覧を返す
         * @param {number} [page] ページ番号
         * @param {number} [size] 取得件数
         * @param {string} [sort] ソート順。日時でソートする場合は createdAt や -createdAt を指定する
         * @param {string} [name] 事案名での絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJians(page?: number, size?: number, sort?: string, name?: string, options?: any): AxiosPromise<JiansResponse> {
            return localVarFp.getJians(page, size, sort, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JianApi - object-oriented interface
 * @export
 * @class JianApi
 * @extends {BaseAPI}
 */
export class JianApi extends BaseAPI {
    /**
     * 
     * @summary 事案を作成する
     * @param {CreateJianRequest} createJianRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JianApi
     */
    public createJian(createJianRequest: CreateJianRequest, options?: AxiosRequestConfig) {
        return JianApiFp(this.configuration).createJian(createJianRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 事案一覧を返す
     * @param {number} [page] ページ番号
     * @param {number} [size] 取得件数
     * @param {string} [sort] ソート順。日時でソートする場合は createdAt や -createdAt を指定する
     * @param {string} [name] 事案名での絞り込み
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JianApi
     */
    public getJians(page?: number, size?: number, sort?: string, name?: string, options?: AxiosRequestConfig) {
        return JianApiFp(this.configuration).getJians(page, size, sort, name, options).then((request) => request(this.axios, this.basePath));
    }
}


